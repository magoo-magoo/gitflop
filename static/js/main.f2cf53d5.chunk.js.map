{"version":3,"sources":["configuration/configuration.ts","github/github.ts","Components/Branches/BranchRow.tsx","Components/Branches/BranchList.tsx","Components/Branches/CreateRelease.tsx","Components/Branches/Branches.tsx","Components/SearchAppBar.tsx","Components/Settings.tsx","Components/App.tsx","serviceWorker.ts","index.tsx"],"names":["defaultConfig","Object","objectSpread","redirectUri","githubApiGraphQl","githubApiUrl","organizations","value","localStorage","getItem","JSON","parse","fromStorage","getSettings","setConfig","setItem","stringify","githubClient","getGithubClient","token","uri","ApolloClient","headers","Authorization","concat","createGithubClient","match","str","matcher","matchArray","length","mapResponseToBranches","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","response","result","responseData","wrap","_context","prev","next","Array","sent","data","organization","repositories","nodes","forEach","repo","refs","ref","push","name","lastCommitHash","target","oid","commitUrl","pushedDate","version","feature","gitflow","isFeature","isMaster","isHotfix","isRealease","isDevelop","repository","url","org","avatarUrl","abrupt","stop","this","_x","apply","arguments","queryAllOrganizationBranches","_ref2","_callee2","orgs","i","branches","_context2","queryOrganizationBranches","_x2","organizationLogin","githubToken","query","gql","_templateObject","organizationQuery","createBranch","_ref3","_callee3","brancheName","baseBranch","_context3","fetch","method","body","sha","console","log","_x3","_x4","mapResponseToRepository","_ref4","_callee4","_context4","_x5","queryOrganizationRepository","_templateObject2","classes","root","width","icon","verticalAlign","height","details","alignItems","column","flexBasis","link","textDecoration","&:hover","BranchRow","branch","react_default","createElement","style","index_es","defaultExpanded","expandIcon","ExpandMore_default","variant","href","size","color","BranchList","_React$Component","classCallCheck","possibleConstructorReturn","getPrototypeOf","inherits","createClass","key","_this$props","props","title","Grid_default","container","spacing","item","xs","Typography_default","map","Branches_BranchRow","React","Component","CreateRelease","_this","call","handleClickOpen","setState","open","handleClose","handleOrganizationChange","e","availableRepositories","selectedOrganization","selectedBaseBranch","selectedRepositoryName","handleRepositoryChange","repositoryName","repoBranches","state","filter","b","availableBranches","handleBaseBranchChange","newBranchName","_this2","aria-label","onClick","Add_default","Dialog_default","onClose","aria-labelledby","DialogTitle_default","id","DialogContent_default","DialogContentText_default","fullWidth","TextField_default","label","select","onChange","inputProps","branchName","autoFocus","margin","type","DialogActions_default","Button_default","find","padding","Branches","releases","features","productions","developments","others","hotfix","_componentDidMount","branchListCards","sm","md","lg","xl","BranchList_BranchList","CreateRelease_CreateRelease","row","control","checked","direction","withStyles","theme","grow","flexGrow","menuButton","marginLeft","marginRight","defineProperty","display","breakpoints","up","search","position","borderRadius","shape","backgroundColor","fade","palette","common","white","unit","searchIcon","pointerEvents","justifyContent","inputRoot","inputInput","paddingTop","paddingRight","paddingBottom","paddingLeft","transition","transitions","create","&:focus","className","AppBar_default","Toolbar_default","noWrap","navigate","process","Search_default","InputBase_default","placeholder","input","IconButton_default","Settings_default","location","reload","ExitToApp_default","Fragment","settings","Settings","settingsValue","multiline","rowsMax","defaultValue","App","window","code","githubCode","react","Components_SearchAppBar","es","Settings_Settings","path","Components_Branches_Branches","Boolean","hostname","ReactDOM","render","src_Components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f2cf53d5.chunk.js","sourcesContent":["const fromStorage = () => {\n    const value = localStorage.getItem('relator-app-config')\n    if (!value) {\n        return {}\n    }\n    return JSON.parse(value)\n}\n\nexport interface Configuration {\n    redirectUri: string\n    githubToken: string\n    githubApiGraphQl: string\n    githubApiUrl: string\n    githubCode: string\n    organizations: string[]\n}\n\nlet defaultConfig: Configuration = {\n    redirectUri: 'http://localhost:3000/',\n    githubApiGraphQl: 'https://api.github.com/graphql',\n    githubApiUrl: 'https://api.github.com',\n    organizations: ['eflon'],\n    ...fromStorage(),\n}\n\nexport const getSettings = () => defaultConfig\nexport const setConfig = (value: Partial<Configuration>) => {\n    defaultConfig = { ...defaultConfig, ...value }\n    localStorage.setItem('relator-app-config', JSON.stringify(defaultConfig))\n}\n","import ApolloClient, { gql, ApolloQueryResult } from 'apollo-boost'\nimport { getSettings } from '../configuration/configuration'\nimport { Branch, Repository } from './branch'\nimport { QueryAllBranchesResponse } from './model'\n\nlet githubClient: ApolloClient<{}> | null = null\n\nconst createGithubClient = (token: string, uri: string) => {\n    githubClient = new ApolloClient({\n        uri,\n        headers: {\n            Authorization: `token ${token}`,\n        },\n    })\n    return githubClient\n}\n\nexport const getGithubClient = (token: string) =>\n    githubClient !== null\n        ? githubClient\n        : createGithubClient(token, getSettings().githubApiGraphQl)\n\nconst match = (\n    str: string,\n    matcher: { [Symbol.match](string: string): RegExpMatchArray | null }\n) => {\n    const matchArray = str.match(matcher)\n    if (matchArray && matchArray.length === 1) {\n        return true\n    }\n    return false\n}\n\nconst mapResponseToBranches = async (\n    response: Promise<ApolloQueryResult<QueryAllBranchesResponse>>\n) => {\n    const result = new Array<Branch>()\n\n    const responseData = await response\n    responseData.data.organization.repositories.nodes.forEach(repo => {\n        repo.refs.nodes.forEach(ref => {\n            result.push({\n                name: ref.name,\n                lastCommitHash: ref.target.oid,\n                commitUrl: ref.target.commitUrl,\n                pushedDate: ref.target.pushedDate,\n                version: null,\n                feature: null,\n                gitflow: {\n                    isFeature: match(ref.name, /feature\\//),\n                    isMaster: match(ref.name, /master/),\n                    isHotfix: match(ref.name, /hotfix\\//),\n                    isRealease: match(ref.name, /release\\//),\n                    isDevelop: match(ref.name, /develop/),\n                },\n                repository: {\n                    name: repo.name,\n                    url: repo.url,\n                    org: {\n                        name: responseData.data.organization.name,\n                        url: responseData.data.organization.url,\n                        avatarUrl: responseData.data.organization.avatarUrl,\n                    },\n                },\n            })\n        })\n    })\n\n    return result\n}\n\nexport const queryAllOrganizationBranches = async (orgs: string[]) => {\n    if (!orgs || orgs.length === 0) {\n        return []\n    }\n    let result = new Array<Branch>()\n\n    for (let i = 0; i < orgs.length; i++) {\n        const org = orgs[i]\n        const branches = await queryOrganizationBranches(org)\n        result = result.concat(branches)\n    }\n\n    return result\n}\n\nconst organizationQuery = (organizationLogin: string) =>\n    getGithubClient(getSettings().githubToken).query<QueryAllBranchesResponse>({\n        query: gql`\n{\norganization(login: \"${organizationLogin}\") {\n  name\n  url\n  avatarUrl\n  repositories(first: 100) {\n    nodes {\n      name\n      url\n      refs(first: 100, refPrefix: \"refs/heads/\") {\n        nodes {\n          name\n          id\n          prefix\n          target {\n            commitUrl\n            oid\n            id\n            __typename\n            ... on Commit {\n              message\n              pushedDate\n              treeUrl\n            }\n          }\n        }\n      }\n    }\n  }\n}\n}  \n`,\n    })\n\nconst queryOrganizationBranches = (organizationLogin: string) =>\n    mapResponseToBranches(organizationQuery(organizationLogin))\n\nexport const createBranch = async (\n    brancheName: string,\n    baseBranch: Branch | undefined\n) => {\n    if (!baseBranch) {\n        return\n    }\n    const result = await fetch(\n        `${getSettings().githubApiUrl}/repos/${\n            baseBranch.repository.org.name\n        }/${baseBranch.repository.name}/git/refs`,\n        {\n            method: 'POST',\n            body: JSON.stringify({\n                ref: `refs/heads/${brancheName}`,\n                sha: baseBranch.lastCommitHash,\n            }),\n            headers: { Authorization: `token ${getSettings().githubToken}` },\n        }\n    )\n    console.log('createBranch', result)\n}\n\nconst mapResponseToRepository = async (\n    response: Promise<ApolloQueryResult<QueryAllBranchesResponse>>\n) => {\n    const result = new Array<Repository>()\n    const responseData = await response\n    responseData.data.organization.repositories.nodes.forEach(repo => {\n        result.push({\n            name: repo.name,\n            url: repo.url,\n            org: {\n                name: responseData.data.organization.name,\n                url: responseData.data.organization.url,\n                avatarUrl: responseData.data.organization.avatarUrl,\n            },\n        })\n    })\n\n    return result\n}\n\nexport const queryOrganizationRepository = (organizationLogin: string) =>\n    mapResponseToRepository(\n        getGithubClient(getSettings().githubToken).query({\n            query: gql`\n{\n    organization(login: \"${organizationLogin}\") {\n      repositories(first: 100) {\n        nodes {\n          name\n          url\n        }\n      }\n    }\n  }  \n`,\n        })\n    )\n","import React from 'react'\nimport { Branch } from '../../github/branch'\nimport {\n    ExpansionPanel,\n    ExpansionPanelSummary,\n    ExpansionPanelDetails,\n    Divider,\n    ExpansionPanelActions,\n    Button,\n    Typography,\n} from '@material-ui/core'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\n\nconst classes = {\n    root: {\n        width: '100%',\n    },\n    icon: {\n        verticalAlign: 'bottom',\n        height: 20,\n        width: 20,\n    },\n    details: {\n        alignItems: 'center',\n    },\n    column: {\n        flexBasis: '33.33%',\n    },\n    link: {\n        textDecoration: 'none',\n        '&:hover': {\n            textDecoration: 'underline',\n        },\n    },\n}\n\ninterface Props {\n    branch: Branch\n}\n\nconst BranchRow: React.FC<Props> = ({ branch }) => {\n    return (\n        <div style={classes.root}>\n            <ExpansionPanel defaultExpanded={false}>\n                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                    <div style={classes.column}>\n                        <Typography>{branch.repository.name}</Typography>\n                    </div>\n                    <div style={classes.column}>\n                        <Typography>{branch.name}</Typography>\n                    </div>\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails style={classes.details}>\n                    <div style={classes.column}>\n                        <Typography>\n                            commit hash: {branch.lastCommitHash}\n                        </Typography>\n                    </div>\n                    <div style={classes.column}>\n                        <Typography>{branch.repository.org.name}</Typography>\n                    </div>\n                    <div style={classes.column}>\n                        <Typography variant=\"caption\">\n                            Select your destination of choice\n                            <br />\n                            <a\n                                href=\"#sub-labels-and-columns\"\n                                style={classes.link}\n                            >\n                                Learn more\n                            </a>\n                        </Typography>\n                    </div>\n                </ExpansionPanelDetails>\n                <Divider />\n                <ExpansionPanelActions>\n                    <Button size=\"small\">Cancel</Button>\n                    <Button size=\"small\" color=\"primary\">\n                        Save\n                    </Button>\n                </ExpansionPanelActions>\n            </ExpansionPanel>\n        </div>\n    )\n}\n\nexport default BranchRow\n","import React from 'react'\nimport Grid from '@material-ui/core/Grid'\nimport Typography from '@material-ui/core/Typography'\nimport BranchRow from './BranchRow'\nimport { Branch } from '../../github/branch'\n\ninterface Props {\n    branches: Branch[]\n    title: string\n}\n\nexport class BranchList extends React.Component<Props> {\n    render() {\n        const { branches, title } = this.props\n        return (\n            <div>\n                <Grid container spacing={16}>\n                    <Grid item xs={12}>\n                        <Typography variant=\"h6\">{title}</Typography>\n                        {branches.length === 0 ? (\n                            <Typography>No branch</Typography>\n                        ) : (\n                            branches.map((branch, i) => (\n                                <BranchRow branch={branch} key={i} />\n                            ))\n                        )}\n                        {}\n                    </Grid>\n                </Grid>\n            </div>\n        )\n    }\n} \n","import React, { ChangeEvent } from 'react'\nimport Button from '@material-ui/core/Button'\nimport TextField from '@material-ui/core/TextField'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogContentText from '@material-ui/core/DialogContentText'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport { Fab, MenuItem, FormControl } from '@material-ui/core'\nimport AddIcon from '@material-ui/icons/Add'\nimport {\n    createBranch,\n    queryOrganizationRepository,\n    queryAllOrganizationBranches,\n} from '../../github/github'\nimport { getSettings } from '../../configuration/configuration'\nimport { Branch, Repository } from '../../github/branch'\n\ninterface State {\n    newBranchName: string\n    selectedOrganization: string\n    availableRepositories: Repository[]\n    availableBranches: Branch[]\n    selectedRepositoryName: string\n    open: boolean\n    selectedBaseBranch: string\n}\n\nexport default class CreateRelease extends React.Component<{}, State> {\n    constructor(props: {}) {\n        super(props)\n        this.state = {\n            open: false,\n            newBranchName: 'release/NEW_VERSION',\n            availableRepositories: [],\n            availableBranches: [],\n            selectedOrganization: getSettings().organizations[0],\n            selectedRepositoryName: '',\n            selectedBaseBranch: '',\n        }\n    }\n    handleClickOpen = () => {\n        this.setState({ open: true })\n    }\n\n    handleClose = () => {\n        this.setState({ open: false })\n    }\n    handleOrganizationChange = async (e: ChangeEvent<HTMLSelectElement>) => {\n        this.setState({ selectedOrganization: e.target.value })\n        const availableRepositories = await queryOrganizationRepository(\n            e.target.value\n        )\n        this.setState({\n            availableRepositories,\n            selectedBaseBranch: '',\n            selectedRepositoryName: '',\n        })\n    }\n    handleRepositoryChange = async (e: ChangeEvent<HTMLSelectElement>) => {\n        const repositoryName = e.target.value\n        this.setState({ selectedRepositoryName: repositoryName })\n        const branches = await queryAllOrganizationBranches([\n            this.state.selectedOrganization,\n        ])\n        const repoBranches = branches.filter(b => b.repository.name === repositoryName)\n        this.setState({\n            availableBranches: repoBranches,\n            selectedBaseBranch: '',\n        })\n    }\n    handleBaseBranchChange = async (e: ChangeEvent<HTMLSelectElement>) => {\n        this.setState({ selectedBaseBranch: e.target.value })\n    }\n\n    render() {\n        return (\n            <div>\n                <Fab\n                    color=\"primary\"\n                    variant=\"extended\"\n                    aria-label=\"Create release\"\n                    onClick={this.handleClickOpen}\n                >\n                    <AddIcon />\n                    Create release\n                </Fab>\n                <Dialog\n                    open={this.state.open}\n                    onClose={this.handleClose}\n                    aria-labelledby=\"form-dialog-title\"\n                >\n                    <DialogTitle id=\"form-dialog-title\">\n                        Create next release\n                    </DialogTitle>\n                    <DialogContent>\n                        <DialogContentText>\n                            Create next release. May be a release or hotfix\n                            branch. Choose your organization, repository and\n                            branch name.\n                        </DialogContentText>\n                        <br />\n                        <br />\n                        <FormControl fullWidth>\n                            <TextField\n                                label=\"organization\"\n                                select={true}\n                                value={this.state.selectedOrganization}\n                                onChange={this.handleOrganizationChange}\n                                inputProps={{\n                                    name: 'organization',\n                                    id: 'organization',\n                                }}\n                                fullWidth={true}\n                            >\n                                {getSettings().organizations.map((org, i) => (\n                                    <MenuItem key={i} value={org}>\n                                        {org}\n                                    </MenuItem>\n                                ))}\n                            </TextField>\n                        </FormControl>\n                        <br />\n                        <br />\n                        <FormControl fullWidth>\n                            <TextField\n                                label=\"repository\"\n                                fullWidth={true}\n                                select\n                                value={this.state.selectedRepositoryName}\n                                onChange={this.handleRepositoryChange}\n                                inputProps={{\n                                    name: 'repository',\n                                    id: 'repository',\n                                }}\n                            >\n                                {this.state.availableRepositories.map(\n                                    (repo, i) => (\n                                        <MenuItem key={i} value={repo.name}>\n                                            {repo.name}\n                                        </MenuItem>\n                                    )\n                                )}\n                            </TextField>\n                        </FormControl>\n                        <br />\n                        <br />\n                        <FormControl fullWidth>\n                            <TextField\n                                label=\"baseBranch\"\n                                fullWidth={true}\n                                select\n                                value={this.state.selectedBaseBranch}\n                                onChange={this.handleBaseBranchChange}\n                                inputProps={{\n                                    name: 'baseBranch',\n                                    id: 'baseBranch',\n                                }}\n                            >\n                                {this.state.availableBranches.map(\n                                    (branchName, i) => (\n                                        <MenuItem\n                                            key={i}\n                                            value={branchName.name}\n                                        >\n                                            {branchName.name}\n                                        </MenuItem>\n                                    )\n                                )}\n                            </TextField>\n                        </FormControl>\n                        <br />\n                        <br />\n                        <TextField\n                            autoFocus\n                            margin=\"dense\"\n                            id=\"branchName\"\n                            label=\"Branch name\"\n                            type=\"text\"\n                            fullWidth\n                            value={this.state.newBranchName}\n                            onChange={e =>\n                                this.setState({ newBranchName: e.target.value })\n                            }\n                        />\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={this.handleClose} color=\"primary\">\n                            Cancel\n                        </Button>\n                        <Button\n                            onClick={async () => {\n                                if (\n                                    this.state.newBranchName &&\n                                    this.state.selectedBaseBranch\n                                ) {\n                                    await createBranch(\n                                        this.state.newBranchName,\n                                        this.state.availableBranches.find(\n                                            b =>\n                                                b.name ===\n                                                this.state.selectedBaseBranch\n                                        )\n                                    )\n                                    this.handleClose()\n                                }\n                            }}\n                            color=\"primary\"\n                        >\n                            Create\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </div>\n        )\n    }\n}\n","import React from 'react'\nimport { Branch } from '../../github/branch'\nimport { queryAllOrganizationBranches } from '../../github/github'\nimport { BranchList } from './BranchList'\nimport { Grid, FormGroup, FormControlLabel, Switch } from '@material-ui/core'\nimport { RouteComponentProps } from '@reach/router'\nimport { getSettings } from '../../configuration/configuration'\nimport CreateRelease from './CreateRelease'\n\nconst style = {\n    container: {\n        padding: 16,\n    },\n}\ninterface State {\n    branches: Branch[]\n    releases: boolean\n    productions: boolean\n    features: boolean\n    developments: boolean\n    others: boolean\n    hotfix: boolean\n}\nexport class Branches extends React.Component<RouteComponentProps, State> {\n    constructor(props: {}) {\n        super(props)\n        this.state = {\n            branches: [],\n            releases: true,\n            features: true,\n            productions: true,\n            developments: true,\n            others: true,\n            hotfix: true,\n        }\n    }\n    public async componentDidMount() {\n        const result = await queryAllOrganizationBranches(\n            getSettings().organizations\n        )\n        this.setState({ branches: result })\n    }\n\n    public render() {\n        const branchListCards: JSX.Element[] = []\n\n        if (this.state.features) {\n            branchListCards.push(\n                <Grid key=\"Features\" item xs={12} sm={8} md={6} lg={4} xl={2}>\n                    <BranchList\n                        title=\"Features\"\n                        branches={this.state.branches.filter(\n                            b => b.gitflow.isFeature\n                        )}\n                    />\n                </Grid>\n            )\n        }\n        if (this.state.releases) {\n            branchListCards.push(\n                <Grid key=\"Releases\" item xs={12} sm={8} md={6} lg={4} xl={2}>\n                    <BranchList\n                        title=\"Releases\"\n                        branches={this.state.branches.filter(\n                            b => b.gitflow.isRealease\n                        )}\n                    />\n                </Grid>\n            )\n        }\n        if (this.state.hotfix) {\n            branchListCards.push(\n                <Grid key=\"Hotfixes\" item xs={12} sm={8} md={6} lg={4} xl={2}>\n                    <BranchList\n                        title=\"Hotfixes\"\n                        branches={this.state.branches.filter(\n                            b => b.gitflow.isHotfix\n                        )}\n                    />\n                </Grid>\n            )\n        }\n        if (this.state.developments) {\n            branchListCards.push(\n                <Grid\n                    key=\"Development\"\n                    item\n                    xs={12}\n                    sm={8}\n                    md={6}\n                    lg={4}\n                    xl={2}\n                >\n                    <BranchList\n                        title=\"Development\"\n                        branches={this.state.branches.filter(\n                            b => b.gitflow.isDevelop\n                        )}\n                    />\n                </Grid>\n            )\n        }\n        if (this.state.productions) {\n            branchListCards.push(\n                <Grid key=\"Production\" item xs={12} sm={8} md={6} lg={4} xl={2}>\n                    <BranchList\n                        title=\"Production\"\n                        branches={this.state.branches.filter(\n                            b => b.gitflow.isMaster\n                        )}\n                    />\n                </Grid>\n            )\n        }\n        if (this.state.others) {\n            branchListCards.push(\n                <Grid key=\"Other\" item xs={12} sm={8} md={6} lg={4} xl={2}>\n                    <BranchList\n                        title=\"Other\"\n                        branches={this.state.branches.filter(\n                            b =>\n                                !b.gitflow.isMaster &&\n                                !b.gitflow.isDevelop &&\n                                !b.gitflow.isFeature &&\n                                !b.gitflow.isHotfix &&\n                                !b.gitflow.isRealease\n                        )}\n                    />\n                </Grid>\n            )\n        }\n\n        return (\n            <div style={style.container}>\n                <CreateRelease />\n                <FormGroup row>\n                    <FormControlLabel\n                        control={\n                            <Switch\n                                checked={this.state.productions}\n                                onChange={() => {\n                                    this.setState({\n                                        productions: !this.state.productions,\n                                    })\n                                }}\n                                value=\"checkedA\"\n                            />\n                        }\n                        label=\"Production\"\n                    />\n                    <FormControlLabel\n                        control={\n                            <Switch\n                                checked={this.state.features}\n                                onChange={() => {\n                                    this.setState({\n                                        features: !this.state.features,\n                                    })\n                                }}\n                                value=\"checkedA\"\n                            />\n                        }\n                        label=\"Features\"\n                    />\n                    <FormControlLabel\n                        control={\n                            <Switch\n                                checked={this.state.releases}\n                                onChange={() => {\n                                    this.setState({\n                                        releases: !this.state.releases,\n                                    })\n                                }}\n                                value=\"checkedA\"\n                            />\n                        }\n                        label=\"Releases\"\n                    />\n                    <FormControlLabel\n                        control={\n                            <Switch\n                                checked={this.state.others}\n                                onChange={() => {\n                                    this.setState({\n                                        others: !this.state.others,\n                                    })\n                                }}\n                                value=\"checkedA\"\n                            />\n                        }\n                        label=\"Others\"\n                    />\n                    <FormControlLabel\n                        control={\n                            <Switch\n                                checked={this.state.developments}\n                                onChange={() => {\n                                    this.setState({\n                                        developments: !this.state.developments,\n                                    })\n                                }}\n                                value=\"checkedA\"\n                            />\n                        }\n                        label=\"Developments\"\n                    />\n                </FormGroup>\n                <Grid container direction=\"row\" spacing={32}>\n                    {branchListCards}\n                </Grid>\n            </div>\n        )\n    }\n}\n\nexport default Branches\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport IconButton from '@material-ui/core/IconButton'\nimport Typography from '@material-ui/core/Typography'\nimport InputBase from '@material-ui/core/InputBase'\nimport { fade } from '@material-ui/core/styles/colorManipulator'\nimport {\n    withStyles,\n    Theme,\n    StyledComponentProps,\n    StyleRules,\n} from '@material-ui/core/styles'\nimport SettingsIcon from '@material-ui/icons/Settings'\nimport ExitIcon from '@material-ui/icons/ExitToApp'\nimport SearchIcon from '@material-ui/icons/Search'\nimport { Link, redirectTo, navigate } from '@reach/router'\nimport { setConfig } from '../configuration/configuration'\nimport { Button } from '@material-ui/core'\n\nconst styles = (theme: Theme): StyleRules => ({\n    root: {\n        width: '100%',\n    },\n    grow: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginLeft: -12,\n        marginRight: 20,\n    },\n    title: {\n        display: 'none',\n        [theme.breakpoints.up('sm')]: {\n            display: 'block',\n        },\n    },\n    search: {\n        position: 'relative',\n        borderRadius: theme.shape.borderRadius,\n        backgroundColor: fade(theme.palette.common.white, 0.15),\n        '&:hover': {\n            backgroundColor: fade(theme.palette.common.white, 0.25),\n        },\n        marginLeft: 0,\n        width: '100%',\n        [theme.breakpoints.up('sm')]: {\n            marginLeft: theme.spacing.unit,\n            width: 'auto',\n        },\n    },\n    searchIcon: {\n        width: theme.spacing.unit * 9,\n        height: '100%',\n        position: 'absolute',\n        pointerEvents: 'none',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    inputRoot: {\n        color: 'inherit',\n        width: '100%',\n    },\n    inputInput: {\n        paddingTop: theme.spacing.unit,\n        paddingRight: theme.spacing.unit,\n        paddingBottom: theme.spacing.unit,\n        paddingLeft: theme.spacing.unit * 10,\n        transition: theme.transitions.create('width'),\n        width: '100%',\n        [theme.breakpoints.up('sm')]: {\n            width: 120,\n            '&:focus': {\n                width: 200,\n            },\n        },\n    },\n})\n\nconst SearchAppBar = (props: StyledComponentProps) => {\n    const { classes } = props\n    if (!classes) {\n        return <></>\n    }\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <Typography\n                        className={classes.title}\n                        variant=\"h6\"\n                        color=\"inherit\"\n                        noWrap\n                        onClick={() => navigate(process.env.PUBLIC_URL + '/')}\n                    >\n                        Git Flop\n                    </Typography>\n                    <div className={classes.grow} />\n                    <div className={classes.search}>\n                        <div className={classes.searchIcon}>\n                            <SearchIcon />\n                        </div>\n                        <InputBase\n                            placeholder=\"Search…\"\n                            classes={{\n                                root: classes.inputRoot,\n                                input: classes.inputInput,\n                            }}\n                        />\n                    </div>\n                    <IconButton\n                        color=\"inherit\"\n                        aria-label=\"settings\"\n                        onClick={() =>\n                            navigate(process.env.PUBLIC_URL + '/configuration')\n                        }\n                    >\n                        <SettingsIcon />\n                    </IconButton>\n                    <IconButton\n                        color=\"inherit\"\n                        aria-label=\"settings\"\n                        onClick={() => {\n                            setConfig({\n                                githubToken: (null as unknown) as string,\n                            })\n                            location.reload()\n                        }}\n                    >\n                        <ExitIcon />\n                    </IconButton>\n                </Toolbar>\n            </AppBar>\n        </div>\n    )\n}\n\nSearchAppBar.propTypes = {\n    classes: PropTypes.object.isRequired,\n}\n\nexport default withStyles(styles)(SearchAppBar)\n","import React from 'react'\nimport {\n    setConfig,\n    Configuration,\n} from '../configuration/configuration'\nimport { TextField, Typography, Button } from '@material-ui/core'\nimport { RouteComponentProps } from '@reach/router'\n\nexport const style = {\n    settings: {\n        width: '100%',\n    },\n}\n\ninterface State {\n    settingsValue: string\n}\ninterface Props {\n    settings: Configuration\n}\n\nexport class Settings extends React.Component<\n    RouteComponentProps & Props,\n    State\n> {\n    constructor(props: RouteComponentProps & Props) {\n        super(props)\n        this.state = {\n            settingsValue: JSON.stringify(props.settings),\n        }\n    }\n    render() {\n        const { settings } = this.props\n        return (\n            <>\n                <Typography variant=\"h4\">Settings</Typography>\n                <TextField\n                    id=\"outlined-multiline-static\"\n                    label=\"Settings\"\n                    multiline\n                    rowsMax=\"20\"\n                    defaultValue={JSON.stringify(settings, null, 4)}\n                    margin=\"normal\"\n                    variant=\"standard\"\n                    style={style.settings}\n                    onChange={e =>\n                        this.setState({ settingsValue: e.target.value })\n                    }\n                />\n                <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    onClick={() => {\n                        setConfig(JSON.parse(this.state.settingsValue))\n                        location.href = '/'\n                    }}\n                >\n                    Save\n                </Button>\n            </>\n        )\n    }\n}\n","import * as React from 'react'\nimport { Component } from 'react'\nimport './App.css'\nimport { getSettings, setConfig } from '../configuration/configuration'\nimport Branches from './Branches/Branches'\nimport { AppBar, Toolbar, Button, Typography } from '@material-ui/core'\nimport SearchAppBar from './SearchAppBar'\nimport { Router, Link, RouteComponentProps } from '@reach/router'\nimport { Settings } from './Settings'\n\nclass App extends Component {\n    async componentDidMount() {\n        const match = window.location.href.match(/\\?code=(.*)/)\n        if (match) {\n            const code = match[1]\n            console.log(code)\n            setConfig({ githubCode: code })\n        }\n    }\n\n    componentDidCatch(e: any) {\n        console.log(e)\n    }\n\n    render() {\n        const { githubToken } = getSettings()\n        const logged = githubToken && githubToken !== ''\n        return (\n            <div className=\"App\">\n                <SearchAppBar />\n                <Router>\n                    <Settings\n                        path={process.env.PUBLIC_URL + '/configuration'}\n                        settings={getSettings()}\n                    />\n                    <Branches path={process.env.PUBLIC_URL + '/'} />\n                    {/* {logged ? (\n                    ) : (\n                        <Typography variant=\"h2\">Enter Github token</Typography>\n                    )} */}\n                </Router>\n            </div>\n        )\n    }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}