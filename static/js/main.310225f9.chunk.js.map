{"version":3,"sources":["configuration/configuration.ts","github/github.ts","Components/Branches/BranchRow.tsx","Components/Branches/BranchList.tsx","Components/Branches/CreateRelease.tsx","Components/Branches/Branches.tsx","Components/SearchAppBar.tsx","Components/Settings.tsx","Components/App.tsx","serviceWorker.ts","index.tsx"],"names":["defaultConfig","Object","objectSpread","githubToken","githubApiGraphQl","githubApiUrl","organizations","value","localStorage","getItem","JSON","parse","fromStorage","getSettings","setConfig","setItem","stringify","githubClient","getGithubClient","token","uri","ApolloClient","headers","Authorization","concat","defaultOptions","query","fetchPolicy","createGithubClient","match","str","matcher","matchArray","length","mapResponseToBranches","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","response","result","responseData","wrap","_context","prev","next","Array","sent","data","organization","repositories","nodes","forEach","repo","refs","ref","push","name","lastCommitHash","target","oid","lastMessage","message","lastCommitShortHash","abbreviatedOid","commitUrl","pushedDate","version","feature","gitflow","isFeature","isMaster","isHotfix","isRealease","isDevelop","repository","url","org","avatarUrl","login","abrupt","stop","this","_x","apply","arguments","queryAllOrganizationBranches","_ref2","_callee2","orgs","i","branches","_context2","queryOrganizationBranches","_x2","organizationLogin","gql","_templateObject","organizationQuery","createBranch","_ref3","_callee3","newBrancheName","baseBranch","_context3","fetch","method","body","sha","console","log","_x3","_x4","mapResponseToRepository","_ref4","_callee4","_context4","_x5","queryOrganizationRepository","_templateObject2","classes","root","width","overflow","whiteSpace","icon","verticalAlign","height","details","alignItems","column","flexBasis","link","textDecoration","&:hover","BranchRow","branch","react_default","createElement","style","index_es","defaultExpanded","expandIcon","ExpandMore_default","variant","align","noWrap","href","BranchList","_React$Component","classCallCheck","possibleConstructorReturn","getPrototypeOf","inherits","createClass","key","_this$props","props","title","Grid_default","container","spacing","item","xs","Typography_default","map","Branches_BranchRow","React","Component","CreateRelease","_this","call","handleClickOpen","setState","open","handleClose","handleOrganizationChange","e","selectedOrganization","updateAvailableRepositories","handleRepositoryChange","repositoryName","repoBranches","selectedRepositoryName","state","filter","b","availableBranches","selectedBaseBranch","handleBaseBranchChange","availableRepositories","newBranchName","_this2","onCreated","color","aria-label","onClick","Add_default","Dialog_default","onClose","aria-labelledby","DialogTitle_default","id","DialogContent_default","DialogContentText_default","fullWidth","TextField_default","label","select","onChange","inputProps","branchName","autoFocus","margin","type","DialogActions_default","Button_default","_callee6","_context6","find","padding","nbElements","coef","Math","round","Branches","reload","toConsumableArray","releases","features","productions","developments","others","hotfix","_componentDidMount","branchListCards","columns","nbColumns","x","sm","md","lg","xl","BranchList_BranchList","CreateRelease_CreateRelease","row","control","checked","direction","withStyles","theme","grow","flexGrow","menuButton","marginLeft","marginRight","defineProperty","display","breakpoints","up","search","position","borderRadius","shape","backgroundColor","fade","palette","common","white","unit","searchIcon","pointerEvents","justifyContent","inputRoot","inputInput","paddingTop","paddingRight","paddingBottom","paddingLeft","transition","transitions","create","&:focus","className","AppBar_default","Toolbar_default","navigate","process","Search_default","InputBase_default","placeholder","input","IconButton_default","Settings_default","location","ExitToApp_default","Fragment","settings","Settings","settingsValue","multiline","rowsMax","defaultValue","App","react","Components_SearchAppBar","es","Settings_Settings","path","Components_Branches_Branches","Boolean","window","hostname","ReactDOM","render","src_Components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.310225f9.chunk.js","sourcesContent":["const fromStorage = () => {\n    const value = localStorage.getItem('relator-app-config')\n    if (!value) {\n        return {}\n    }\n    return JSON.parse(value)\n}\n\nexport interface Configuration {\n    githubToken: string\n    githubApiGraphQl: string\n    githubApiUrl: string\n    organizations: string[]\n}\n\nlet defaultConfig: Configuration = {\n    githubToken: 'INSERT_YOUR_GITHUB_TOKEN',\n    githubApiGraphQl: 'https://api.github.com/graphql',\n    githubApiUrl: 'https://api.github.com',\n    organizations: ['eflon'],\n    ...fromStorage(),\n}\n\nexport const getSettings = () => defaultConfig\nexport const setConfig = (value: Partial<Configuration>) => {\n    defaultConfig = { ...defaultConfig, ...value }\n    localStorage.setItem('relator-app-config', JSON.stringify(defaultConfig))\n}\n","import ApolloClient, { gql, ApolloQueryResult } from 'apollo-boost'\nimport { getSettings } from '../configuration/configuration'\nimport { Branch, Repository } from './branch'\nimport { QueryAllBranchesResponse } from './model'\n\nlet githubClient: ApolloClient<{}> | null = null\n\nconst createGithubClient = (token: string, uri: string) => {\n    githubClient = new ApolloClient({\n        uri,\n        headers: {\n            Authorization: `token ${token}`,\n        },\n    })\n    githubClient.defaultOptions.query = {\n        fetchPolicy: \"no-cache\"\n    };\n    return githubClient\n}\n\nexport const getGithubClient = (token: string) =>\n    githubClient !== null\n        ? githubClient\n        : createGithubClient(token, getSettings().githubApiGraphQl)\n\nconst match = (\n    str: string,\n    matcher: { [Symbol.match](string: string): RegExpMatchArray | null }\n) => {\n    const matchArray = str.match(matcher)\n    if (matchArray && matchArray.length === 1) {\n        return true\n    }\n    return false\n}\n\nconst mapResponseToBranches = async (\n    response: Promise<ApolloQueryResult<QueryAllBranchesResponse>>\n) => {\n    const result = new Array<Branch>()\n\n    const responseData = await response\n    responseData.data.organization.repositories.nodes.forEach(repo => {\n        repo.refs.nodes.forEach(ref => {\n            result.push({\n                name: ref.name,\n                lastCommitHash: ref.target.oid,\n                lastMessage: ref.target.message,\n                lastCommitShortHash: ref.target.abbreviatedOid,\n                commitUrl: ref.target.commitUrl,\n                pushedDate: ref.target.pushedDate,\n                version: null,\n                feature: null,\n                gitflow: {\n                    isFeature: match(ref.name, /feature\\//),\n                    isMaster: match(ref.name, /master/),\n                    isHotfix: match(ref.name, /hotfix\\//),\n                    isRealease: match(ref.name, /release\\//),\n                    isDevelop: match(ref.name, /develop/),\n                },\n                repository: {\n                    name: repo.name,\n                    url: repo.url,\n                    org: {\n                        name: responseData.data.organization.name,\n                        url: responseData.data.organization.url,\n                        avatarUrl: responseData.data.organization.avatarUrl,\n                        login: responseData.data.organization.login,\n                    },\n                },\n            })\n        })\n    })\n\n    return result\n}\n\nexport const queryAllOrganizationBranches = async (orgs: string[]) => {\n    if (!orgs || orgs.length === 0) {\n        return []\n    }\n    let result = new Array<Branch>()\n\n    for (let i = 0; i < orgs.length; i++) {\n        const org = orgs[i]\n        const branches = await queryOrganizationBranches(org)\n        result = result.concat(branches)\n    }\n\n    return result\n}\n\nconst organizationQuery = (organizationLogin: string) =>\n    getGithubClient(getSettings().githubToken).query<QueryAllBranchesResponse>({\n        query: gql`\n{\norganization(login: \"${organizationLogin}\") {\n  name\n  login\n  url\n  avatarUrl\n  repositories(first: 100) {\n    nodes {\n      name\n      url\n      refs(first: 100, refPrefix: \"refs/heads/\") {\n        nodes {\n          name\n          id\n          prefix\n          target {\n            commitUrl\n            abbreviatedOid\n            oid\n            id\n            __typename\n            ... on Commit {\n              message\n              pushedDate\n              treeUrl\n            }\n          }\n        }\n      }\n    }\n  }\n}\n}  \n`\n    })\n\nconst queryOrganizationBranches = (organizationLogin: string) =>\n    mapResponseToBranches(organizationQuery(organizationLogin))\n\nexport const createBranch = async (\n    newBrancheName: string,\n    baseBranch: Branch | undefined\n) => {\n    if (!baseBranch) {\n        return\n    }\n    const result = await fetch(\n        `${getSettings().githubApiUrl}/repos/${\n            baseBranch.repository.org.login\n        }/${baseBranch.repository.name}/git/refs`,\n        {\n            method: 'POST',\n            body: JSON.stringify({\n                ref: `refs/heads/${newBrancheName}`,\n                sha: baseBranch.lastCommitHash,\n            }),\n            headers: { Authorization: `token ${getSettings().githubToken}` },\n        }\n    )\n    console.log('createBranch', result)\n}\n\nconst mapResponseToRepository = async (\n    response: Promise<ApolloQueryResult<QueryAllBranchesResponse>>\n) => {\n    const result = new Array<Repository>()\n    const responseData = await response\n    responseData.data.organization.repositories.nodes.forEach(repo => {\n        result.push({\n            name: repo.name,\n            url: repo.url,\n            org: {\n                name: responseData.data.organization.name,\n                url: responseData.data.organization.url,\n                avatarUrl: responseData.data.organization.avatarUrl,\n                login: responseData.data.organization.login,\n            },\n        })\n    })\n\n    return result\n}\n\nexport const queryOrganizationRepository = (organizationLogin: string) =>\n    mapResponseToRepository(\n        getGithubClient(getSettings().githubToken).query({\n            query: gql`\n{\n    organization(login: \"${organizationLogin}\") {\n      repositories(first: 100) {\n        nodes {\n          name\n          url\n        }\n      }\n    }\n  }  \n`,\n        })\n    )\n","import React from 'react'\nimport { Branch } from '../../github/branch'\nimport {\n    ExpansionPanel,\n    ExpansionPanelSummary,\n    ExpansionPanelDetails,\n    Divider,\n    ExpansionPanelActions,\n    Button,\n    Typography,\n} from '@material-ui/core'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\n\nconst classes = {\n    root: {\n        width: '100%',\n        overflow: 'auto',\n        whiteSpace: 'pre' as any,\n    },\n    icon: {\n        verticalAlign: 'bottom',\n        height: 20,\n        width: 20,\n    },\n    details: {\n        alignItems: 'center',\n    },\n    column: {\n        flexBasis: '33.33%',\n    },\n    link: {\n        textDecoration: 'none',\n        '&:hover': {\n            textDecoration: 'underline',\n        },\n    },\n}\n\ninterface Props {\n    branch: Branch\n}\n\nconst BranchRow: React.FC<Props> = ({ branch }) => {\n    return (\n        <div style={classes.root}>\n            <ExpansionPanel defaultExpanded={false}>\n                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                    <div style={classes.column}>\n                        <Typography>{branch.repository.name}</Typography>\n                    </div>\n                    <div style={classes.column}>\n                        <Typography>{branch.name}</Typography>\n                    </div>\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails style={classes.details}>\n                    <div>\n                        <Typography variant=\"h6\">\n                            commit hash: {branch.lastCommitShortHash}\n                        </Typography>\n                        <Typography align=\"justify\" noWrap={true}>\n                            {branch.lastMessage}\n                        </Typography>\n                        <Typography variant=\"caption\">\n                            More info\n                            <br />\n                            <a\n                                href={branch.repository.url}\n                                style={classes.link}\n                            >\n                                Go to Github\n                            </a>\n                        </Typography>\n                    </div>\n                </ExpansionPanelDetails>\n                <Divider />\n                {/* <ExpansionPanelActions>\n                    <Button size=\"small\">Cancel</Button>\n                    <Button size=\"small\" color=\"primary\">\n                        Save\n                    </Button>\n                </ExpansionPanelActions> */}\n            </ExpansionPanel>\n        </div>\n    )\n}\n\nexport default BranchRow\n","import React from 'react'\nimport Grid from '@material-ui/core/Grid'\nimport Typography from '@material-ui/core/Typography'\nimport BranchRow from './BranchRow'\nimport { Branch } from '../../github/branch'\n\ninterface Props {\n    branches: Branch[]\n    title: string\n}\n\nexport class BranchList extends React.Component<Props> {\n    render() {\n        const { branches, title } = this.props\n        return (\n            <div>\n                <Grid container spacing={16}>\n                    <Grid item xs={12}>\n                        <Typography variant=\"h6\">{title}</Typography>\n                        {branches.length === 0 ? (\n                            <Typography>No branch</Typography>\n                        ) : (\n                            branches.map((branch, i) => (\n                                <BranchRow branch={branch} key={i} />\n                            ))\n                        )}\n                        {}\n                    </Grid>\n                </Grid>\n            </div>\n        )\n    }\n} \n","import React, { ChangeEvent } from 'react'\nimport Button from '@material-ui/core/Button'\nimport TextField from '@material-ui/core/TextField'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogContentText from '@material-ui/core/DialogContentText'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport { Fab, MenuItem, FormControl } from '@material-ui/core'\nimport AddIcon from '@material-ui/icons/Add'\nimport {\n    createBranch,\n    queryOrganizationRepository,\n    queryAllOrganizationBranches,\n} from '../../github/github'\nimport { getSettings } from '../../configuration/configuration'\nimport { Branch, Repository } from '../../github/branch'\n\ninterface State {\n    newBranchName: string\n    selectedOrganization: string\n    availableRepositories: Repository[]\n    availableBranches: Branch[]\n    selectedRepositoryName: string\n    open: boolean\n    selectedBaseBranch: string\n}\n\ntype Props = {\n    onCreated: () => Promise<void>\n}\n\nexport default class CreateRelease extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props)\n        this.state = {\n            open: false,\n            newBranchName: 'release/NEW_VERSION',\n            availableRepositories: [],\n            availableBranches: [],\n            selectedOrganization: '',\n            selectedRepositoryName: '',\n            selectedBaseBranch: '',\n        }\n    }\n    handleClickOpen = () => {\n        this.setState({ open: true })\n    }\n\n    async componentDidMount() {\n        this.setState({ selectedOrganization: getSettings().organizations[0] })\n        await this.updateAvailableRepositories(getSettings().organizations[0])\n    }\n\n    handleClose = () => {\n        this.setState({ open: false })\n    }\n    handleOrganizationChange = async (e: ChangeEvent<HTMLSelectElement>) => {\n        this.setState({ selectedOrganization: e.target.value })\n        await this.updateAvailableRepositories(e.target.value)\n    }\n    handleRepositoryChange = async (e: ChangeEvent<HTMLSelectElement>) => {\n        const repositoryName = e.target.value\n        this.setState({ selectedRepositoryName: repositoryName })\n        const branches = await queryAllOrganizationBranches([\n            this.state.selectedOrganization,\n        ])\n        const repoBranches = branches.filter(\n            b => b.repository.name === repositoryName\n        )\n        this.setState({\n            availableBranches: repoBranches,\n            selectedBaseBranch: '',\n        })\n    }\n    handleBaseBranchChange = async (e: ChangeEvent<HTMLSelectElement>) => {\n        this.setState({ selectedBaseBranch: e.target.value })\n    }\n\n    private updateAvailableRepositories = async (org: string) => {\n        const availableRepositories = await queryOrganizationRepository(org)\n        this.setState({\n            availableRepositories,\n            selectedBaseBranch: '',\n            selectedRepositoryName: '',\n        })\n    }\n\n    render() {\n        const { onCreated } = this.props\n        return (\n            <div>\n                <Fab\n                    color=\"primary\"\n                    variant=\"extended\"\n                    aria-label=\"Create release\"\n                    onClick={this.handleClickOpen}\n                >\n                    <AddIcon />\n                    Create release\n                </Fab>\n                <Dialog\n                    open={this.state.open}\n                    onClose={this.handleClose}\n                    aria-labelledby=\"form-dialog-title\"\n                >\n                    <DialogTitle id=\"form-dialog-title\">\n                        Create next release\n                    </DialogTitle>\n                    <DialogContent>\n                        <DialogContentText>\n                            Create next release. May be a release or hotfix\n                            branch. Choose your organization, repository and\n                            branch name.\n                        </DialogContentText>\n                        <br />\n                        <br />\n                        <FormControl fullWidth>\n                            <TextField\n                                label=\"organization\"\n                                select={true}\n                                value={this.state.selectedOrganization}\n                                onChange={this.handleOrganizationChange}\n                                inputProps={{\n                                    name: 'organization',\n                                    id: 'organization',\n                                }}\n                                fullWidth={true}\n                            >\n                                {getSettings().organizations.map((org, i) => (\n                                    <MenuItem key={i} value={org}>\n                                        {org}\n                                    </MenuItem>\n                                ))}\n                            </TextField>\n                        </FormControl>\n                        <br />\n                        <br />\n                        <FormControl fullWidth>\n                            <TextField\n                                label=\"repository\"\n                                fullWidth={true}\n                                select\n                                value={this.state.selectedRepositoryName}\n                                onChange={this.handleRepositoryChange}\n                                inputProps={{\n                                    name: 'repository',\n                                    id: 'repository',\n                                }}\n                            >\n                                {this.state.availableRepositories.map(\n                                    (repo, i) => (\n                                        <MenuItem key={i} value={repo.name}>\n                                            {repo.name}\n                                        </MenuItem>\n                                    )\n                                )}\n                            </TextField>\n                        </FormControl>\n                        <br />\n                        <br />\n                        <FormControl fullWidth>\n                            <TextField\n                                label=\"baseBranch\"\n                                fullWidth={true}\n                                select\n                                value={this.state.selectedBaseBranch}\n                                onChange={this.handleBaseBranchChange}\n                                inputProps={{\n                                    name: 'baseBranch',\n                                    id: 'baseBranch',\n                                }}\n                            >\n                                {this.state.availableBranches.map(\n                                    (branchName, i) => (\n                                        <MenuItem\n                                            key={i}\n                                            value={branchName.name}\n                                        >\n                                            {branchName.name}\n                                        </MenuItem>\n                                    )\n                                )}\n                            </TextField>\n                        </FormControl>\n                        <br />\n                        <br />\n                        <TextField\n                            autoFocus\n                            margin=\"dense\"\n                            id=\"branchName\"\n                            label=\"Branch name\"\n                            type=\"text\"\n                            fullWidth\n                            value={this.state.newBranchName}\n                            onChange={e =>\n                                this.setState({ newBranchName: e.target.value })\n                            }\n                        />\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={this.handleClose} color=\"primary\">\n                            Cancel\n                        </Button>\n                        <Button\n                            onClick={async () => {\n                                if (\n                                    this.state.newBranchName &&\n                                    this.state.selectedBaseBranch\n                                ) {\n                                    debugger;\n                                    await createBranch(\n                                        this.state.newBranchName,\n                                        this.state.availableBranches.find(\n                                            b =>\n                                                b.name ===\n                                                this.state.selectedBaseBranch\n                                        )\n                                    )\n                                    await onCreated()\n                                    this.handleClose()\n                                }\n                            }}\n                            color=\"primary\"\n                        >\n                            Create\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </div>\n        )\n    }\n}\n","import React from 'react'\nimport { Branch } from '../../github/branch'\nimport { queryAllOrganizationBranches } from '../../github/github'\nimport { BranchList } from './BranchList'\nimport { Grid, FormGroup, FormControlLabel, Switch } from '@material-ui/core'\nimport { RouteComponentProps } from '@reach/router'\nimport { getSettings } from '../../configuration/configuration'\nimport CreateRelease from './CreateRelease'\n\nconst style = {\n    container: {\n        padding: 16,\n    },\n}\n\ntype col =\n    | boolean\n    | 1\n    | 2\n    | 3\n    | 4\n    | 5\n    | 6\n    | 6\n    | 7\n    | 8\n    | 9\n    | 10\n    | 11\n    | 12\n    | 'auto'\n    | undefined\nconst xs = (nbElements: number, coef: number) => {\n    return Math.round(\n        72 / (nbElements % 2 === 0 ? nbElements + 1 : nbElements - 1) / coef\n    ) as col\n}\n\ninterface State {\n    branches: Branch[]\n    releases: boolean\n    productions: boolean\n    features: boolean\n    developments: boolean\n    others: boolean\n    hotfix: boolean\n}\nexport class Branches extends React.Component<RouteComponentProps, State> {\n    constructor(props: {}) {\n        super(props)\n        this.state = {\n            branches: [],\n            releases: true,\n            features: true,\n            productions: true,\n            developments: true,\n            others: true,\n            hotfix: true,\n        }\n    }\n    public async componentDidMount() {\n        await this.reload()\n    }\n    private reload = async () => {\n        const branches = await queryAllOrganizationBranches(\n            getSettings().organizations\n        )\n        this.setState({ branches: [...branches] })\n    }\n\n    public render() {\n        let branchListCards: JSX.Element[] = []\n        const columns: { key: string; branches: Branch[] }[] = []\n\n        if (this.state.features) {\n            columns.push({\n                key: 'Features',\n                branches: this.state.branches.filter(b => b.gitflow.isFeature),\n            })\n        }\n        if (this.state.releases) {\n            columns.push({\n                key: 'Releases',\n                branches: this.state.branches.filter(b => b.gitflow.isRealease),\n            })\n        }\n        if (this.state.hotfix) {\n            columns.push({\n                key: 'Hotfixes',\n                branches: this.state.branches.filter(b => b.gitflow.isHotfix),\n            })\n        }\n        if (this.state.developments) {\n            columns.push({\n                key: 'Development',\n                branches: this.state.branches.filter(b => b.gitflow.isDevelop),\n            })\n        }\n        if (this.state.productions) {\n            columns.push({\n                key: 'Production',\n                branches: this.state.branches.filter(b => b.gitflow.isMaster),\n            })\n        }\n        if (this.state.others) {\n            columns.push({\n                key: 'Other',\n                branches: this.state.branches.filter(\n                    b =>\n                        !b.gitflow.isMaster &&\n                        !b.gitflow.isDevelop &&\n                        !b.gitflow.isFeature &&\n                        !b.gitflow.isHotfix &&\n                        !b.gitflow.isRealease\n                ),\n            })\n        }\n\n        const nbColumns = columns.length\n\n        branchListCards = columns.map(x => (\n            <Grid\n                key={x.key}\n                item\n                xs={xs(nbColumns, 1)}\n                sm={xs(nbColumns, 2)}\n                md={xs(nbColumns, 3)}\n                lg={xs(nbColumns, 4)}\n                xl={xs(nbColumns, 6)}\n            >\n                <BranchList title={x.key} branches={x.branches} />\n            </Grid>\n        ))\n\n        return (\n            <div style={style.container}>\n                <CreateRelease onCreated={this.reload} />\n                <FormGroup row>\n                    <FormControlLabel\n                        control={\n                            <Switch\n                                checked={this.state.features}\n                                onChange={() => {\n                                    this.setState({\n                                        features: !this.state.features,\n                                    })\n                                }}\n                                value=\"checkedA\"\n                            />\n                        }\n                        label=\"Features\"\n                    />\n                    <FormControlLabel\n                        control={\n                            <Switch\n                                checked={this.state.releases}\n                                onChange={() => {\n                                    this.setState({\n                                        releases: !this.state.releases,\n                                    })\n                                }}\n                                value=\"checkedA\"\n                            />\n                        }\n                        label=\"Releases\"\n                    />\n                    <FormControlLabel\n                        control={\n                            <Switch\n                                checked={this.state.hotfix}\n                                onChange={() => {\n                                    this.setState({\n                                        hotfix: !this.state.hotfix,\n                                    })\n                                }}\n                                value=\"checkedA\"\n                            />\n                        }\n                        label=\"Hotfixes\"\n                    />\n                    <FormControlLabel\n                        control={\n                            <Switch\n                                checked={this.state.developments}\n                                onChange={() => {\n                                    this.setState({\n                                        developments: !this.state.developments,\n                                    })\n                                }}\n                                value=\"checkedA\"\n                            />\n                        }\n                        label=\"Developments\"\n                    />\n                    <FormControlLabel\n                        control={\n                            <Switch\n                                checked={this.state.productions}\n                                onChange={() => {\n                                    this.setState({\n                                        productions: !this.state.productions,\n                                    })\n                                }}\n                                value=\"checkedA\"\n                            />\n                        }\n                        label=\"Production\"\n                    />\n\n                    <FormControlLabel\n                        control={\n                            <Switch\n                                checked={this.state.others}\n                                onChange={() => {\n                                    this.setState({\n                                        others: !this.state.others,\n                                    })\n                                }}\n                                value=\"checkedA\"\n                            />\n                        }\n                        label=\"Others\"\n                    />\n                </FormGroup>\n                <Grid container direction=\"row\" spacing={32}>\n                    {branchListCards}\n                </Grid>\n            </div>\n        )\n    }\n}\n\nexport default Branches\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport IconButton from '@material-ui/core/IconButton'\nimport Typography from '@material-ui/core/Typography'\nimport InputBase from '@material-ui/core/InputBase'\nimport { fade } from '@material-ui/core/styles/colorManipulator'\nimport {\n    withStyles,\n    Theme,\n    StyledComponentProps,\n    StyleRules,\n} from '@material-ui/core/styles'\nimport SettingsIcon from '@material-ui/icons/Settings'\nimport ExitIcon from '@material-ui/icons/ExitToApp'\nimport SearchIcon from '@material-ui/icons/Search'\nimport { Link, redirectTo, navigate } from '@reach/router'\nimport { setConfig } from '../configuration/configuration'\nimport { Button } from '@material-ui/core'\n\nconst styles = (theme: Theme): StyleRules => ({\n    root: {\n        width: '100%',\n    },\n    grow: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginLeft: -12,\n        marginRight: 20,\n    },\n    title: {\n        display: 'none',\n        [theme.breakpoints.up('sm')]: {\n            display: 'block',\n        },\n    },\n    search: {\n        position: 'relative',\n        borderRadius: theme.shape.borderRadius,\n        backgroundColor: fade(theme.palette.common.white, 0.15),\n        '&:hover': {\n            backgroundColor: fade(theme.palette.common.white, 0.25),\n        },\n        marginLeft: 0,\n        width: '100%',\n        [theme.breakpoints.up('sm')]: {\n            marginLeft: theme.spacing.unit,\n            width: 'auto',\n        },\n    },\n    searchIcon: {\n        width: theme.spacing.unit * 9,\n        height: '100%',\n        position: 'absolute',\n        pointerEvents: 'none',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    inputRoot: {\n        color: 'inherit',\n        width: '100%',\n    },\n    inputInput: {\n        paddingTop: theme.spacing.unit,\n        paddingRight: theme.spacing.unit,\n        paddingBottom: theme.spacing.unit,\n        paddingLeft: theme.spacing.unit * 10,\n        transition: theme.transitions.create('width'),\n        width: '100%',\n        [theme.breakpoints.up('sm')]: {\n            width: 120,\n            '&:focus': {\n                width: 200,\n            },\n        },\n    },\n})\n\nconst SearchAppBar = (props: StyledComponentProps) => {\n    const { classes } = props\n    if (!classes) {\n        return <></>\n    }\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <Typography\n                        className={classes.title}\n                        variant=\"h6\"\n                        color=\"inherit\"\n                        noWrap\n                        onClick={() => navigate(process.env.PUBLIC_URL + '/')}\n                    >\n                        Git Flop\n                    </Typography>\n                    <div className={classes.grow} />\n                    <div className={classes.search}>\n                        <div className={classes.searchIcon}>\n                            <SearchIcon />\n                        </div>\n                        <InputBase\n                            placeholder=\"Search…\"\n                            classes={{\n                                root: classes.inputRoot,\n                                input: classes.inputInput,\n                            }}\n                        />\n                    </div>\n                    <IconButton\n                        color=\"inherit\"\n                        aria-label=\"settings\"\n                        onClick={() =>\n                            navigate(process.env.PUBLIC_URL + '/configuration')\n                        }\n                    >\n                        <SettingsIcon />\n                    </IconButton>\n                    <IconButton\n                        color=\"inherit\"\n                        aria-label=\"settings\"\n                        onClick={() => {\n                            setConfig({\n                                githubToken: (null as unknown) as string,\n                            })\n                            location.reload()\n                        }}\n                    >\n                        <ExitIcon />\n                    </IconButton>\n                </Toolbar>\n            </AppBar>\n        </div>\n    )\n}\n\nSearchAppBar.propTypes = {\n    classes: PropTypes.object.isRequired,\n}\n\nexport default withStyles(styles)(SearchAppBar)\n","import React from 'react'\nimport {\n    setConfig,\n    Configuration,\n} from '../configuration/configuration'\nimport { TextField, Typography, Button } from '@material-ui/core'\nimport { RouteComponentProps } from '@reach/router'\n\nexport const style = {\n    settings: {\n        width: '100%',\n    },\n}\n\ninterface State {\n    settingsValue: string\n}\ninterface Props {\n    settings: Configuration\n}\n\nexport class Settings extends React.Component<\n    RouteComponentProps & Props,\n    State\n> {\n    constructor(props: RouteComponentProps & Props) {\n        super(props)\n        this.state = {\n            settingsValue: JSON.stringify(props.settings),\n        }\n    }\n    render() {\n        const { settings } = this.props\n        return (\n            <>\n                <Typography variant=\"h4\">Settings</Typography>\n                <TextField\n                    id=\"outlined-multiline-static\"\n                    label=\"Settings\"\n                    multiline\n                    rowsMax=\"20\"\n                    defaultValue={JSON.stringify(settings, null, 4)}\n                    margin=\"normal\"\n                    variant=\"standard\"\n                    style={style.settings}\n                    onChange={e =>\n                        this.setState({ settingsValue: e.target.value })\n                    }\n                />\n                <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    onClick={() => {\n                        setConfig(JSON.parse(this.state.settingsValue))\n                        location.href = '/'\n                    }}\n                >\n                    Save\n                </Button>\n            </>\n        )\n    }\n}\n","import * as React from 'react'\nimport { Component } from 'react'\nimport './App.css'\nimport { getSettings } from '../configuration/configuration'\nimport Branches from './Branches/Branches'\nimport SearchAppBar from './SearchAppBar'\nimport { Router } from '@reach/router'\nimport { Settings } from './Settings'\n\nclass App extends Component {\n\n    componentDidCatch(e: any) {\n        console.log(e)\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <SearchAppBar />\n                <Router>\n                    <Settings\n                        path={process.env.PUBLIC_URL + '/configuration'}\n                        settings={getSettings()}\n                    />\n                    <Branches path={process.env.PUBLIC_URL + '/'} />\n                </Router>\n            </div>\n        )\n    }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}