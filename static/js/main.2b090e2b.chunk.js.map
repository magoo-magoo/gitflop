{"version":3,"sources":["configuration/configuration.ts","github/github.ts","Components/Branches/BranchRow.tsx","Components/Branches/BranchList.tsx","Components/Branches/CreateRelease.tsx","Components/Branches/Branches.tsx","Components/SearchAppBar.tsx","Components/Settings.tsx","Components/App.tsx","serviceWorker.ts","index.tsx"],"names":["defaultConfig","Object","objectSpread","githubToken","githubApiGraphQl","githubApiUrl","organizations","value","localStorage","getItem","JSON","parse","fromStorage","getSettings","setConfig","setItem","stringify","githubClient","getGithubClient","token","uri","ApolloClient","headers","Authorization","concat","createGithubClient","match","str","matcher","matchArray","length","mapResponseToBranches","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","response","result","responseData","wrap","_context","prev","next","Array","sent","data","organization","repositories","nodes","forEach","repo","refs","ref","push","name","lastCommitHash","target","oid","lastMessage","message","lastCommitShortHash","abbreviatedOid","commitUrl","pushedDate","version","feature","gitflow","isFeature","isMaster","isHotfix","isRealease","isDevelop","repository","url","org","avatarUrl","abrupt","stop","this","_x","apply","arguments","queryAllOrganizationBranches","_ref2","_callee2","orgs","i","branches","_context2","queryOrganizationBranches","_x2","organizationLogin","query","gql","_templateObject","organizationQuery","createBranch","_ref3","_callee3","brancheName","baseBranch","_context3","fetch","method","body","sha","console","log","_x3","_x4","mapResponseToRepository","_ref4","_callee4","_context4","_x5","queryOrganizationRepository","_templateObject2","classes","root","width","icon","verticalAlign","height","details","alignItems","column","flexBasis","link","textDecoration","&:hover","BranchRow","branch","react_default","createElement","style","index_es","defaultExpanded","expandIcon","ExpandMore_default","variant","href","BranchList","_React$Component","classCallCheck","possibleConstructorReturn","getPrototypeOf","inherits","createClass","key","_this$props","props","title","Grid_default","container","spacing","item","xs","Typography_default","map","Branches_BranchRow","React","Component","CreateRelease","_this","call","handleClickOpen","setState","open","handleClose","handleOrganizationChange","e","selectedOrganization","updateAvailableRepositories","handleRepositoryChange","repositoryName","repoBranches","selectedRepositoryName","state","filter","b","availableBranches","selectedBaseBranch","handleBaseBranchChange","availableRepositories","newBranchName","_this2","color","aria-label","onClick","Add_default","Dialog_default","onClose","aria-labelledby","DialogTitle_default","id","DialogContent_default","DialogContentText_default","fullWidth","TextField_default","label","select","onChange","inputProps","branchName","autoFocus","margin","type","DialogActions_default","Button_default","_callee6","_context6","find","padding","Branches","releases","features","productions","developments","others","hotfix","_componentDidMount","branchListCards","sm","md","lg","xl","BranchList_BranchList","CreateRelease_CreateRelease","row","control","checked","direction","withStyles","theme","grow","flexGrow","menuButton","marginLeft","marginRight","defineProperty","display","breakpoints","up","search","position","borderRadius","shape","backgroundColor","fade","palette","common","white","unit","searchIcon","pointerEvents","justifyContent","inputRoot","inputInput","paddingTop","paddingRight","paddingBottom","paddingLeft","transition","transitions","create","&:focus","className","AppBar_default","Toolbar_default","noWrap","navigate","process","Search_default","InputBase_default","placeholder","input","IconButton_default","Settings_default","location","reload","ExitToApp_default","Fragment","settings","Settings","settingsValue","multiline","rowsMax","defaultValue","App","react","Components_SearchAppBar","es","Settings_Settings","path","Components_Branches_Branches","Boolean","window","hostname","ReactDOM","render","src_Components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2b090e2b.chunk.js","sourcesContent":["const fromStorage = () => {\n    const value = localStorage.getItem('relator-app-config')\n    if (!value) {\n        return {}\n    }\n    return JSON.parse(value)\n}\n\nexport interface Configuration {\n    githubToken: string\n    githubApiGraphQl: string\n    githubApiUrl: string\n    organizations: string[]\n}\n\nlet defaultConfig: Configuration = {\n    githubToken: 'INSERT_YOUR_GITHUB_TOKEN',\n    githubApiGraphQl: 'https://api.github.com/graphql',\n    githubApiUrl: 'https://api.github.com',\n    organizations: ['eflon'],\n    ...fromStorage(),\n}\n\nexport const getSettings = () => defaultConfig\nexport const setConfig = (value: Partial<Configuration>) => {\n    defaultConfig = { ...defaultConfig, ...value }\n    localStorage.setItem('relator-app-config', JSON.stringify(defaultConfig))\n}\n","import ApolloClient, { gql, ApolloQueryResult } from 'apollo-boost'\nimport { getSettings } from '../configuration/configuration'\nimport { Branch, Repository } from './branch'\nimport { QueryAllBranchesResponse } from './model'\n\nlet githubClient: ApolloClient<{}> | null = null\n\nconst createGithubClient = (token: string, uri: string) => {\n    githubClient = new ApolloClient({\n        uri,\n        headers: {\n            Authorization: `token ${token}`,\n        },\n    })\n    return githubClient\n}\n\nexport const getGithubClient = (token: string) =>\n    githubClient !== null\n        ? githubClient\n        : createGithubClient(token, getSettings().githubApiGraphQl)\n\nconst match = (\n    str: string,\n    matcher: { [Symbol.match](string: string): RegExpMatchArray | null }\n) => {\n    const matchArray = str.match(matcher)\n    if (matchArray && matchArray.length === 1) {\n        return true\n    }\n    return false\n}\n\nconst mapResponseToBranches = async (\n    response: Promise<ApolloQueryResult<QueryAllBranchesResponse>>\n) => {\n    const result = new Array<Branch>()\n\n    const responseData = await response\n    responseData.data.organization.repositories.nodes.forEach(repo => {\n        repo.refs.nodes.forEach(ref => {\n            result.push({\n                name: ref.name,\n                lastCommitHash: ref.target.oid,\n                lastMessage: ref.target.message,\n                lastCommitShortHash: ref.target.abbreviatedOid,\n                commitUrl: ref.target.commitUrl,\n                pushedDate: ref.target.pushedDate,\n                version: null,\n                feature: null,\n                gitflow: {\n                    isFeature: match(ref.name, /feature\\//),\n                    isMaster: match(ref.name, /master/),\n                    isHotfix: match(ref.name, /hotfix\\//),\n                    isRealease: match(ref.name, /release\\//),\n                    isDevelop: match(ref.name, /develop/),\n                },\n                repository: {\n                    name: repo.name,\n                    url: repo.url,\n                    org: {\n                        name: responseData.data.organization.name,\n                        url: responseData.data.organization.url,\n                        avatarUrl: responseData.data.organization.avatarUrl,\n                    },\n                },\n            })\n        })\n    })\n\n    return result\n}\n\nexport const queryAllOrganizationBranches = async (orgs: string[]) => {\n    if (!orgs || orgs.length === 0) {\n        return []\n    }\n    let result = new Array<Branch>()\n\n    for (let i = 0; i < orgs.length; i++) {\n        const org = orgs[i]\n        const branches = await queryOrganizationBranches(org)\n        result = result.concat(branches)\n    }\n\n    return result\n}\n\nconst organizationQuery = (organizationLogin: string) =>\n    getGithubClient(getSettings().githubToken).query<QueryAllBranchesResponse>({\n        query: gql`\n{\norganization(login: \"${organizationLogin}\") {\n  name\n  url\n  avatarUrl\n  repositories(first: 100) {\n    nodes {\n      name\n      url\n      refs(first: 100, refPrefix: \"refs/heads/\") {\n        nodes {\n          name\n          id\n          prefix\n          target {\n            commitUrl\n            abbreviatedOid\n            oid\n            id\n            __typename\n            ... on Commit {\n              message\n              pushedDate\n              treeUrl\n            }\n          }\n        }\n      }\n    }\n  }\n}\n}  \n`,\n    })\n\nconst queryOrganizationBranches = (organizationLogin: string) =>\n    mapResponseToBranches(organizationQuery(organizationLogin))\n\nexport const createBranch = async (\n    brancheName: string,\n    baseBranch: Branch | undefined\n) => {\n    if (!baseBranch) {\n        return\n    }\n    const result = await fetch(\n        `${getSettings().githubApiUrl}/repos/${\n            baseBranch.repository.org.name\n        }/${baseBranch.repository.name}/git/refs`,\n        {\n            method: 'POST',\n            body: JSON.stringify({\n                ref: `refs/heads/${brancheName}`,\n                sha: baseBranch.lastCommitHash,\n            }),\n            headers: { Authorization: `token ${getSettings().githubToken}` },\n        }\n    )\n    console.log('createBranch', result)\n}\n\nconst mapResponseToRepository = async (\n    response: Promise<ApolloQueryResult<QueryAllBranchesResponse>>\n) => {\n    const result = new Array<Repository>()\n    const responseData = await response\n    responseData.data.organization.repositories.nodes.forEach(repo => {\n        result.push({\n            name: repo.name,\n            url: repo.url,\n            org: {\n                name: responseData.data.organization.name,\n                url: responseData.data.organization.url,\n                avatarUrl: responseData.data.organization.avatarUrl,\n            },\n        })\n    })\n\n    return result\n}\n\nexport const queryOrganizationRepository = (organizationLogin: string) =>\n    mapResponseToRepository(\n        getGithubClient(getSettings().githubToken).query({\n            query: gql`\n{\n    organization(login: \"${organizationLogin}\") {\n      repositories(first: 100) {\n        nodes {\n          name\n          url\n        }\n      }\n    }\n  }  \n`,\n        })\n    )\n","import React from 'react'\nimport { Branch } from '../../github/branch'\nimport {\n    ExpansionPanel,\n    ExpansionPanelSummary,\n    ExpansionPanelDetails,\n    Divider,\n    ExpansionPanelActions,\n    Button,\n    Typography,\n} from '@material-ui/core'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\n\nconst classes = {\n    root: {\n        width: '100%',\n    },\n    icon: {\n        verticalAlign: 'bottom',\n        height: 20,\n        width: 20,\n    },\n    details: {\n        alignItems: 'center',\n    },\n    column: {\n        flexBasis: '33.33%',\n    },\n    link: {\n        textDecoration: 'none',\n        '&:hover': {\n            textDecoration: 'underline',\n        },\n    },\n}\n\ninterface Props {\n    branch: Branch\n}\n\nconst BranchRow: React.FC<Props> = ({ branch }) => {\n    return (\n        <div style={classes.root}>\n            <ExpansionPanel defaultExpanded={false}>\n                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                    <div style={classes.column}>\n                        <Typography>{branch.repository.name}</Typography>\n                    </div>\n                    <div style={classes.column}>\n                        <Typography>{branch.name}</Typography>\n                    </div>\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails style={classes.details}>\n                    <div style={classes.column}>\n                        <Typography>\n                            commit hash: {branch.lastCommitShortHash}\n                        </Typography>\n                    </div>\n                    <div style={classes.column}>\n                        <Typography>{branch.lastMessage}</Typography>\n                    </div>\n                    <div style={classes.column}>\n                        <Typography variant=\"caption\">\n                            More info\n                            <br />\n                            <a\n                                href={branch.repository.url}\n                                style={classes.link}\n                            >\n                                Go to Github\n                            </a>\n                        </Typography>\n                    </div>\n                </ExpansionPanelDetails>\n                <Divider />\n                {/* <ExpansionPanelActions>\n                    <Button size=\"small\">Cancel</Button>\n                    <Button size=\"small\" color=\"primary\">\n                        Save\n                    </Button>\n                </ExpansionPanelActions> */}\n            </ExpansionPanel>\n        </div>\n    )\n}\n\nexport default BranchRow\n","import React from 'react'\nimport Grid from '@material-ui/core/Grid'\nimport Typography from '@material-ui/core/Typography'\nimport BranchRow from './BranchRow'\nimport { Branch } from '../../github/branch'\n\ninterface Props {\n    branches: Branch[]\n    title: string\n}\n\nexport class BranchList extends React.Component<Props> {\n    render() {\n        const { branches, title } = this.props\n        return (\n            <div>\n                <Grid container spacing={16}>\n                    <Grid item xs={12}>\n                        <Typography variant=\"h6\">{title}</Typography>\n                        {branches.length === 0 ? (\n                            <Typography>No branch</Typography>\n                        ) : (\n                            branches.map((branch, i) => (\n                                <BranchRow branch={branch} key={i} />\n                            ))\n                        )}\n                        {}\n                    </Grid>\n                </Grid>\n            </div>\n        )\n    }\n} \n","import React, { ChangeEvent } from 'react'\nimport Button from '@material-ui/core/Button'\nimport TextField from '@material-ui/core/TextField'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogContentText from '@material-ui/core/DialogContentText'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport { Fab, MenuItem, FormControl } from '@material-ui/core'\nimport AddIcon from '@material-ui/icons/Add'\nimport {\n    createBranch,\n    queryOrganizationRepository,\n    queryAllOrganizationBranches,\n} from '../../github/github'\nimport { getSettings } from '../../configuration/configuration'\nimport { Branch, Repository } from '../../github/branch'\n\ninterface State {\n    newBranchName: string\n    selectedOrganization: string\n    availableRepositories: Repository[]\n    availableBranches: Branch[]\n    selectedRepositoryName: string\n    open: boolean\n    selectedBaseBranch: string\n}\n\nexport default class CreateRelease extends React.Component<{}, State> {\n    constructor(props: {}) {\n        super(props)\n        this.state = {\n            open: false,\n            newBranchName: 'release/NEW_VERSION',\n            availableRepositories: [],\n            availableBranches: [],\n            selectedOrganization: '',\n            selectedRepositoryName: '',\n            selectedBaseBranch: '',\n        }\n    }\n    handleClickOpen = () => {\n        this.setState({ open: true })\n    }\n\n    async componentDidMount() {\n        this.setState({ selectedOrganization: getSettings().organizations[0] })\n        await this.updateAvailableRepositories(getSettings().organizations[0])\n    }\n\n    handleClose = () => {\n        this.setState({ open: false })\n    }\n    handleOrganizationChange = async (e: ChangeEvent<HTMLSelectElement>) => {\n        this.setState({ selectedOrganization: e.target.value })\n        await this.updateAvailableRepositories(e.target.value)\n    }\n    handleRepositoryChange = async (e: ChangeEvent<HTMLSelectElement>) => {\n        const repositoryName = e.target.value\n        this.setState({ selectedRepositoryName: repositoryName })\n        const branches = await queryAllOrganizationBranches([\n            this.state.selectedOrganization,\n        ])\n        const repoBranches = branches.filter(\n            b => b.repository.name === repositoryName\n        )\n        this.setState({\n            availableBranches: repoBranches,\n            selectedBaseBranch: '',\n        })\n    }\n    handleBaseBranchChange = async (e: ChangeEvent<HTMLSelectElement>) => {\n        this.setState({ selectedBaseBranch: e.target.value })\n    }\n\n    private updateAvailableRepositories = async (org: string) => {\n        const availableRepositories = await queryOrganizationRepository(org)\n        this.setState({\n            availableRepositories,\n            selectedBaseBranch: '',\n            selectedRepositoryName: '',\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <Fab\n                    color=\"primary\"\n                    variant=\"extended\"\n                    aria-label=\"Create release\"\n                    onClick={this.handleClickOpen}\n                >\n                    <AddIcon />\n                    Create release\n                </Fab>\n                <Dialog\n                    open={this.state.open}\n                    onClose={this.handleClose}\n                    aria-labelledby=\"form-dialog-title\"\n                >\n                    <DialogTitle id=\"form-dialog-title\">\n                        Create next release\n                    </DialogTitle>\n                    <DialogContent>\n                        <DialogContentText>\n                            Create next release. May be a release or hotfix\n                            branch. Choose your organization, repository and\n                            branch name.\n                        </DialogContentText>\n                        <br />\n                        <br />\n                        <FormControl fullWidth>\n                            <TextField\n                                label=\"organization\"\n                                select={true}\n                                value={this.state.selectedOrganization}\n                                onChange={this.handleOrganizationChange}\n                                inputProps={{\n                                    name: 'organization',\n                                    id: 'organization',\n                                }}\n                                fullWidth={true}\n                            >\n                                {getSettings().organizations.map((org, i) => (\n                                    <MenuItem key={i} value={org}>\n                                        {org}\n                                    </MenuItem>\n                                ))}\n                            </TextField>\n                        </FormControl>\n                        <br />\n                        <br />\n                        <FormControl fullWidth>\n                            <TextField\n                                label=\"repository\"\n                                fullWidth={true}\n                                select\n                                value={this.state.selectedRepositoryName}\n                                onChange={this.handleRepositoryChange}\n                                inputProps={{\n                                    name: 'repository',\n                                    id: 'repository',\n                                }}\n                            >\n                                {this.state.availableRepositories.map(\n                                    (repo, i) => (\n                                        <MenuItem key={i} value={repo.name}>\n                                            {repo.name}\n                                        </MenuItem>\n                                    )\n                                )}\n                            </TextField> \n                        </FormControl>\n                        <br />\n                        <br />\n                        <FormControl fullWidth>\n                            <TextField\n                                label=\"baseBranch\"\n                                fullWidth={true}\n                                select\n                                value={this.state.selectedBaseBranch}\n                                onChange={this.handleBaseBranchChange}\n                                inputProps={{\n                                    name: 'baseBranch',\n                                    id: 'baseBranch',\n                                }}\n                            >\n                                {this.state.availableBranches.map(\n                                    (branchName, i) => (\n                                        <MenuItem\n                                            key={i}\n                                            value={branchName.name}\n                                        >\n                                            {branchName.name}\n                                        </MenuItem>\n                                    )\n                                )}\n                            </TextField>\n                        </FormControl>\n                        <br />\n                        <br />\n                        <TextField\n                            autoFocus\n                            margin=\"dense\"\n                            id=\"branchName\"\n                            label=\"Branch name\"\n                            type=\"text\"\n                            fullWidth\n                            value={this.state.newBranchName}\n                            onChange={e =>\n                                this.setState({ newBranchName: e.target.value })\n                            }\n                        />\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={this.handleClose} color=\"primary\">\n                            Cancel\n                        </Button>\n                        <Button\n                            onClick={async () => {\n                                if (\n                                    this.state.newBranchName &&\n                                    this.state.selectedBaseBranch\n                                ) {\n                                    await createBranch(\n                                        this.state.newBranchName,\n                                        this.state.availableBranches.find(\n                                            b =>\n                                                b.name ===\n                                                this.state.selectedBaseBranch\n                                        )\n                                    )\n                                    this.handleClose()\n                                }\n                            }}\n                            color=\"primary\"\n                        >\n                            Create\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </div>\n        )\n    }\n}\n","import React from 'react'\nimport { Branch } from '../../github/branch'\nimport { queryAllOrganizationBranches } from '../../github/github'\nimport { BranchList } from './BranchList'\nimport { Grid, FormGroup, FormControlLabel, Switch } from '@material-ui/core'\nimport { RouteComponentProps } from '@reach/router'\nimport { getSettings } from '../../configuration/configuration'\nimport CreateRelease from './CreateRelease'\n\nconst style = {\n    container: {\n        padding: 16,\n    },\n}\ninterface State {\n    branches: Branch[]\n    releases: boolean\n    productions: boolean\n    features: boolean\n    developments: boolean\n    others: boolean\n    hotfix: boolean\n}\nexport class Branches extends React.Component<RouteComponentProps, State> {\n    constructor(props: {}) {\n        super(props)\n        this.state = {\n            branches: [],\n            releases: true,\n            features: true,\n            productions: true,\n            developments: true,\n            others: true,\n            hotfix: true,\n        }\n    }\n    public async componentDidMount() {\n        const result = await queryAllOrganizationBranches(\n            getSettings().organizations\n        )\n        this.setState({ branches: result })\n    }\n\n    public render() {\n        const branchListCards: JSX.Element[] = []\n\n        if (this.state.features) {\n            branchListCards.push(\n                <Grid key=\"Features\" item xs={12} sm={8} md={6} lg={4} xl={2}>\n                    <BranchList\n                        title=\"Features\"\n                        branches={this.state.branches.filter(\n                            b => b.gitflow.isFeature\n                        )}\n                    />\n                </Grid>\n            )\n        }\n        if (this.state.releases) {\n            branchListCards.push(\n                <Grid key=\"Releases\" item xs={12} sm={8} md={6} lg={4} xl={2}>\n                    <BranchList\n                        title=\"Releases\"\n                        branches={this.state.branches.filter(\n                            b => b.gitflow.isRealease\n                        )}\n                    />\n                </Grid>\n            )\n        }\n        if (this.state.hotfix) {\n            branchListCards.push(\n                <Grid key=\"Hotfixes\" item xs={12} sm={8} md={6} lg={4} xl={2}>\n                    <BranchList\n                        title=\"Hotfixes\"\n                        branches={this.state.branches.filter(\n                            b => b.gitflow.isHotfix\n                        )}\n                    />\n                </Grid>\n            )\n        }\n        if (this.state.developments) {\n            branchListCards.push(\n                <Grid\n                    key=\"Development\"\n                    item\n                    xs={12}\n                    sm={8}\n                    md={6}\n                    lg={4}\n                    xl={2}\n                >\n                    <BranchList\n                        title=\"Development\"\n                        branches={this.state.branches.filter(\n                            b => b.gitflow.isDevelop\n                        )}\n                    />\n                </Grid>\n            )\n        }\n        if (this.state.productions) {\n            branchListCards.push(\n                <Grid key=\"Production\" item xs={12} sm={8} md={6} lg={4} xl={2}>\n                    <BranchList\n                        title=\"Production\"\n                        branches={this.state.branches.filter(\n                            b => b.gitflow.isMaster\n                        )}\n                    />\n                </Grid>\n            )\n        }\n        if (this.state.others) {\n            branchListCards.push(\n                <Grid key=\"Other\" item xs={12} sm={8} md={6} lg={4} xl={2}>\n                    <BranchList\n                        title=\"Other\"\n                        branches={this.state.branches.filter(\n                            b =>\n                                !b.gitflow.isMaster &&\n                                !b.gitflow.isDevelop &&\n                                !b.gitflow.isFeature &&\n                                !b.gitflow.isHotfix &&\n                                !b.gitflow.isRealease\n                        )}\n                    />\n                </Grid>\n            )\n        }\n\n        return (\n            <div style={style.container}>\n                <CreateRelease />\n                <FormGroup row>\n                    <FormControlLabel\n                        control={\n                            <Switch\n                                checked={this.state.features}\n                                onChange={() => {\n                                    this.setState({\n                                        features: !this.state.features,\n                                    })\n                                }}\n                                value=\"checkedA\"\n                            />\n                        }\n                        label=\"Features\"\n                    />\n                    <FormControlLabel\n                        control={\n                            <Switch\n                                checked={this.state.releases}\n                                onChange={() => {\n                                    this.setState({\n                                        releases: !this.state.releases,\n                                    })\n                                }}\n                                value=\"checkedA\"\n                            />\n                        }\n                        label=\"Releases\"\n                    />\n                    <FormControlLabel\n                        control={\n                            <Switch\n                                checked={this.state.hotfix}\n                                onChange={() => {\n                                    this.setState({\n                                        hotfix: !this.state.hotfix,\n                                    })\n                                }}\n                                value=\"checkedA\"\n                            />\n                        }\n                        label=\"Hotfixes\"\n                    />\n                    <FormControlLabel\n                        control={\n                            <Switch\n                                checked={this.state.developments}\n                                onChange={() => {\n                                    this.setState({\n                                        developments: !this.state.developments,\n                                    })\n                                }}\n                                value=\"checkedA\"\n                            />\n                        }\n                        label=\"Developments\"\n                    />\n                    <FormControlLabel\n                        control={\n                            <Switch\n                                checked={this.state.productions}\n                                onChange={() => {\n                                    this.setState({\n                                        productions: !this.state.productions,\n                                    })\n                                }}\n                                value=\"checkedA\"\n                            />\n                        }\n                        label=\"Production\"\n                    />\n\n                    <FormControlLabel\n                        control={\n                            <Switch\n                                checked={this.state.others}\n                                onChange={() => {\n                                    this.setState({\n                                        others: !this.state.others,\n                                    })\n                                }}\n                                value=\"checkedA\"\n                            />\n                        }\n                        label=\"Others\"\n                    />\n                </FormGroup>\n                <Grid container direction=\"row\" spacing={32}>\n                    {branchListCards}\n                </Grid>\n            </div>\n        )\n    }\n}\n\nexport default Branches\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport IconButton from '@material-ui/core/IconButton'\nimport Typography from '@material-ui/core/Typography'\nimport InputBase from '@material-ui/core/InputBase'\nimport { fade } from '@material-ui/core/styles/colorManipulator'\nimport {\n    withStyles,\n    Theme,\n    StyledComponentProps,\n    StyleRules,\n} from '@material-ui/core/styles'\nimport SettingsIcon from '@material-ui/icons/Settings'\nimport ExitIcon from '@material-ui/icons/ExitToApp'\nimport SearchIcon from '@material-ui/icons/Search'\nimport { Link, redirectTo, navigate } from '@reach/router'\nimport { setConfig } from '../configuration/configuration'\nimport { Button } from '@material-ui/core'\n\nconst styles = (theme: Theme): StyleRules => ({\n    root: {\n        width: '100%',\n    },\n    grow: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginLeft: -12,\n        marginRight: 20,\n    },\n    title: {\n        display: 'none',\n        [theme.breakpoints.up('sm')]: {\n            display: 'block',\n        },\n    },\n    search: {\n        position: 'relative',\n        borderRadius: theme.shape.borderRadius,\n        backgroundColor: fade(theme.palette.common.white, 0.15),\n        '&:hover': {\n            backgroundColor: fade(theme.palette.common.white, 0.25),\n        },\n        marginLeft: 0,\n        width: '100%',\n        [theme.breakpoints.up('sm')]: {\n            marginLeft: theme.spacing.unit,\n            width: 'auto',\n        },\n    },\n    searchIcon: {\n        width: theme.spacing.unit * 9,\n        height: '100%',\n        position: 'absolute',\n        pointerEvents: 'none',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    inputRoot: {\n        color: 'inherit',\n        width: '100%',\n    },\n    inputInput: {\n        paddingTop: theme.spacing.unit,\n        paddingRight: theme.spacing.unit,\n        paddingBottom: theme.spacing.unit,\n        paddingLeft: theme.spacing.unit * 10,\n        transition: theme.transitions.create('width'),\n        width: '100%',\n        [theme.breakpoints.up('sm')]: {\n            width: 120,\n            '&:focus': {\n                width: 200,\n            },\n        },\n    },\n})\n\nconst SearchAppBar = (props: StyledComponentProps) => {\n    const { classes } = props\n    if (!classes) {\n        return <></>\n    }\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <Typography\n                        className={classes.title}\n                        variant=\"h6\"\n                        color=\"inherit\"\n                        noWrap\n                        onClick={() => navigate(process.env.PUBLIC_URL + '/')}\n                    >\n                        Git Flop\n                    </Typography>\n                    <div className={classes.grow} />\n                    <div className={classes.search}>\n                        <div className={classes.searchIcon}>\n                            <SearchIcon />\n                        </div>\n                        <InputBase\n                            placeholder=\"Search…\"\n                            classes={{\n                                root: classes.inputRoot,\n                                input: classes.inputInput,\n                            }}\n                        />\n                    </div>\n                    <IconButton\n                        color=\"inherit\"\n                        aria-label=\"settings\"\n                        onClick={() =>\n                            navigate(process.env.PUBLIC_URL + '/configuration')\n                        }\n                    >\n                        <SettingsIcon />\n                    </IconButton>\n                    <IconButton\n                        color=\"inherit\"\n                        aria-label=\"settings\"\n                        onClick={() => {\n                            setConfig({\n                                githubToken: (null as unknown) as string,\n                            })\n                            location.reload()\n                        }}\n                    >\n                        <ExitIcon />\n                    </IconButton>\n                </Toolbar>\n            </AppBar>\n        </div>\n    )\n}\n\nSearchAppBar.propTypes = {\n    classes: PropTypes.object.isRequired,\n}\n\nexport default withStyles(styles)(SearchAppBar)\n","import React from 'react'\nimport {\n    setConfig,\n    Configuration,\n} from '../configuration/configuration'\nimport { TextField, Typography, Button } from '@material-ui/core'\nimport { RouteComponentProps } from '@reach/router'\n\nexport const style = {\n    settings: {\n        width: '100%',\n    },\n}\n\ninterface State {\n    settingsValue: string\n}\ninterface Props {\n    settings: Configuration\n}\n\nexport class Settings extends React.Component<\n    RouteComponentProps & Props,\n    State\n> {\n    constructor(props: RouteComponentProps & Props) {\n        super(props)\n        this.state = {\n            settingsValue: JSON.stringify(props.settings),\n        }\n    }\n    render() {\n        const { settings } = this.props\n        return (\n            <>\n                <Typography variant=\"h4\">Settings</Typography>\n                <TextField\n                    id=\"outlined-multiline-static\"\n                    label=\"Settings\"\n                    multiline\n                    rowsMax=\"20\"\n                    defaultValue={JSON.stringify(settings, null, 4)}\n                    margin=\"normal\"\n                    variant=\"standard\"\n                    style={style.settings}\n                    onChange={e =>\n                        this.setState({ settingsValue: e.target.value })\n                    }\n                />\n                <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    onClick={() => {\n                        setConfig(JSON.parse(this.state.settingsValue))\n                        location.href = '/'\n                    }}\n                >\n                    Save\n                </Button>\n            </>\n        )\n    }\n}\n","import * as React from 'react'\nimport { Component } from 'react'\nimport './App.css'\nimport { getSettings } from '../configuration/configuration'\nimport Branches from './Branches/Branches'\nimport SearchAppBar from './SearchAppBar'\nimport { Router } from '@reach/router'\nimport { Settings } from './Settings'\n\nclass App extends Component {\n\n    componentDidCatch(e: any) {\n        console.log(e)\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <SearchAppBar />\n                <Router>\n                    <Settings\n                        path={process.env.PUBLIC_URL + '/configuration'}\n                        settings={getSettings()}\n                    />\n                    <Branches path={process.env.PUBLIC_URL + '/'} />\n                </Router>\n            </div>\n        )\n    }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}